plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.sonarqube' version '6.3.1.5724'
	id 'jacoco'
}

group = 'com.satyarth'
version = '0.0.1-SNAPSHOT'
description = 'Backend for Arth banking project'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.13"
}


repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.20.6")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'io.rest-assured:rest-assured'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

sonar {
	properties {
		property "sonar.projectKey", "arth-banking"
		property "sonar.organization", "satyarth-organization"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/*Application.*',
					'**/dto/**',
					'**/exceptions/**',
					'**/constants/**',
					'**/models/**',
					'**/seeder/**',
					'**/repo/**'
			])
		}))
	}
	finalizedBy jacocoTestCoverageVerification
}


jacocoTestCoverageVerification {

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/*Application.*',
					'**/dto/**',
					'**/exceptions/**',
					'**/constants/**',
					'**/models/**',
					'**/repo/**',
					'**/seeder/**'
			])
		}))
	}

	violationRules {
		rule {
			limit {
				minimum = 0.90
			}
		}
	}
}

test {
	finalizedBy jacocoTestReport
}
